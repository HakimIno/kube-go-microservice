basePath: /
definitions:
  models.ChangePasswordRequest:
    properties:
      current_password:
        example: oldpassword123
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  models.ChangePasswordResponse:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: Password changed successfully
        type: string
      method:
        example: POST
        type: string
      path:
        example: /api/v1/users/change-password
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.DeleteUserResponse:
    properties:
      data:
        example: "null"
        type: string
      message:
        example: User deleted successfully
        type: string
      method:
        example: DELETE
        type: string
      path:
        example: /api/v1/users/1
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        properties:
          code:
            example: USER_NOT_FOUND
            type: string
          details:
            example: User with ID 999 not found
            type: string
          message:
            example: User not found
            type: string
          request_id:
            example: 59744195-9e8d-4e07-b17e-39dac2ae2b48
            type: string
          timestamp:
            example: "2025-08-27T08:15:03.832523143Z"
            type: string
        type: object
      method:
        example: GET
        type: string
      path:
        example: /api/v1/users/999
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.GetUserResponse:
    properties:
      data:
        properties:
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      message:
        example: User retrieved successfully
        type: string
      method:
        example: GET
        type: string
      path:
        example: /api/v1/users/1
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.LoginResponse:
    properties:
      data:
        properties:
          token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            type: string
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      message:
        example: Login successful
        type: string
      method:
        example: POST
        type: string
      path:
        example: /api/v1/users/login
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.RefreshTokenResponse:
    properties:
      data:
        properties:
          token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            type: string
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      message:
        example: Token refreshed successfully
        type: string
      method:
        example: POST
        type: string
      path:
        example: /api/v1/users/refresh
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.RegisterResponse:
    properties:
      data:
        properties:
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      message:
        example: User created successfully
        type: string
      method:
        example: POST
        type: string
      path:
        example: /api/v1/users/register
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.UpdateUserResponse:
    properties:
      data:
        properties:
          user:
            $ref: '#/definitions/models.UserResponse'
        type: object
      message:
        example: User updated successfully
        type: string
      method:
        example: PUT
        type: string
      path:
        example: /api/v1/users/1
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserLoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.UserResponse:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2025-08-27T08:15:03.003428Z"
        type: string
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2025-08-27T08:15:03.003428Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
    type: object
  models.ValidationErrorResponse:
    properties:
      error:
        properties:
          code:
            example: VALIDATION_FAILED
            type: string
          details:
            example: Invalid request data format
            type: string
          message:
            example: Validation failed
            type: string
          request_id:
            example: 59744195-9e8d-4e07-b17e-39dac2ae2b48
            type: string
          timestamp:
            example: "2025-08-27T08:15:03.832523143Z"
            type: string
        type: object
      method:
        example: POST
        type: string
      path:
        example: /api/v1/users/register
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-08-27T08:15:03Z"
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/your-username/kube
  description: This is a user management service API built with Hertz framework.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: User Service API
  version: "1.0"
paths:
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account by ID
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve user information by user ID
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/models.GetUserResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Invalid request data or user ID
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update user information
      tags:
      - users
  /api/v1/users/change-password:
    post:
      consumes:
      - application/json
      description: Change the password of the currently authenticated user
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/models.ChangePasswordResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Unauthorized or invalid current password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Account deactivated
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Retrieve information of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Current user information
          schema:
            $ref: '#/definitions/models.GetUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - users
  /api/v1/users/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/models.RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh authentication token
      tags:
      - users
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
