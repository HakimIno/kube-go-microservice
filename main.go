package main

import (
	"context"
	"log"
	"time"

	_ "user-service/docs" // This is generated by swag init
	"user-service/internal/config"
	"user-service/internal/database"
	"user-service/internal/middleware"
	"user-service/pkg/models"
	"user-service/services/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/hertz-contrib/swagger"
	swaggerFiles "github.com/swaggo/files"
)

// @title User Service API
// @version 1.0
// @description This is a user management service API built with Hertz framework.

// @contact.name API Support
// @contact.url https://github.com/your-username/user-service
// @contact.email support@example.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8888
// @BasePath /
// @schemes http https

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	cfg := config.Load()
	db := database.Init(cfg.Database)

	if err := db.AutoMigrate(&models.User{}); err != nil {
		log.Fatal("Failed to migrate database:", err)
	}

	userService := user.NewService(db, cfg.JWT.SecretKey)
	h := server.Default(server.WithHostPorts(":8888"))

	h.Use(middleware.LoggingMiddleware())
	rateLimiter := middleware.NewRateLimiter(100, time.Minute)
	h.Use(rateLimiter.RateLimitMiddleware())
	user.RegisterRoutes(h, userService)

	h.GET("/ping", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(200, map[string]interface{}{
			"message": "pong",
		})
	})

	h.GET("/health", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(200, map[string]interface{}{
			"service": "user-service",
			"status":  "healthy",
		})
	})

	// Swagger documentation endpoint
	url := swagger.URL("http://localhost:8888/swagger/doc.json")
	h.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, url))

	log.Println("User Service starting on port 8888")
	log.Println("Swagger UI available at: http://localhost:8888/swagger/index.html")
	h.Spin()
}
